# -*- coding: utf-8 -*-
"""
Created on Sat May 16 18:17:00 2020

@author: Vrushali Kumbhar
"""

import numpy as np
import pandas as pd


"""
The following batch of code is used to pre-process the data for
"""
loan_data_backup=pd.read_csv(r"C:\Users\HP PC\Downloads\loan_data_2007_2014.csv")
loan_data=loan_data_backup.copy()
print(loan_data.head())
print(loan_data.tail())
print(loan_data.columns.values)
print(loan_data.describe())

#converts all values in the column loan_data['emp_length] to integer values

print(loan_data['emp_length'].unique())
loan_data['emp_length_int']=loan_data['emp_length'].str.replace('\+ years', ' ').str.replace('< 1 year', str(0)).str.replace('years', ' ').str.replace('year', ' ').str.replace('n/a', str(0))
loan_data['emp_length_int']=pd.to_numeric(loan_data['emp_length_int'])
print(loan_data['emp_length_int'].unique())
print(type(loan_data['emp_length_int'][0]))

#applying the same process to the term column
print(loan_data['term'].unique())
loan_data['term_int']=loan_data['term'].str.replace('months', ' ')
loan_data['term_int']=pd.to_numeric(loan_data['term_int'])
print(loan_data['term_int'].unique())
print(type(loan_data['term_int'][0]))

#comverting string data to datetime format and extracting number of months past since earliest credit line
loan_data['earliest_cr_line_date']=pd.to_datetime(loan_data['earliest_cr_line'], format='%b-%y')
#time past has been calculated w.r.t 01st dec, 2017
print(pd.to_datetime('2017-12-01')-loan_data['earliest_cr_line_date'])
loan_data['mths_since_earliest_cr_line']=round(pd.to_numeric((pd.to_datetime('2017-12-01') - loan_data['earliest_cr_line_date']) / np.timedelta64(1, 'M')))
print(loan_data['mths_since_earliest_cr_line'].describe())
#show the rows where the dates are negative
print(loan_data.loc[:, ['earliest_cr_line', 'earliest_cr_line_date', 'mths_since_earliest_cr_line']][loan_data['mths_since_earliest_cr_line']<0])
loan_data['mths_since_earliest_cr_line'][loan_data['mths_since_earliest_cr_line']<0]=loan_data['mths_since_earliest_cr_line'].max()
print(loan_data['mths_since_earliest_cr_line'].min())

#creating dummies and attaching it to the main dataframe

l1=pd.get_dummies(loan_data['grade'], prefix='Grade', prefix_sep=':')
l2=pd.get_dummies(loan_data['sub_grade'], prefix= 'Sub_Grade', prefix_sep=':')
l3=pd.get_dummies(loan_data['home_ownership'], prefix='Home_ownership', prefix_sep=':')
l4=pd.get_dummies(loan_data['verification_status'], prefix='Verification_Status', prefix_sep=':')
l5=pd.get_dummies(loan_data['loan_status'], prefix='Loan_Status', prefix_sep=':')
l6=pd.get_dummies(loan_data['purpose'], prefix='Purpose', prefix_sep=':')
l7=pd.get_dummies(loan_data['addr_state'], prefix='Addr_state', prefix_sep=':')
l8=pd.get_dummies(loan_data['initial_list_status'], prefix='Initial_List_status', prefix_sep=':')
loan_data=pd.concat([loan_data, l1, l2, l3, l4, l5, l6, l7, l8], axis=1)
print(loan_data.columns.values)

#Filling in the gaps(the null spaces) in the dataframe
#print(loan_data.isnull().sum())
loan_data['total_rev_hi_lim'].fillna(loan_data['funded_amnt'], inplace=True)
loan_data['mths_since_earliest_cr_line'].fillna(loan_data['annual_inc'].mean(), inplace=True)
loan_data['mths_since_earliest_cr_line'].fillna(0, inplace=True)
loan_data['acc_now_delinq'].fillna(0, inplace=True)
loan_data['total_acc'].fillna(0, inplace=True)
loan_data['pub_rec'].fillna(0, inplace=True)
loan_data['open_acc'].fillna(0, inplace=True)
loan_data['inq_last_6mths'].fillna(0, inplace=True)
loan_data['delinq_2yrs'].fillna(0, inplace=True)
loan_data['emp_length_int'].fillna(0, inplace=True)
print(loan_data['open_acc'].isnull().sum())

loan_data['good_bad']=np.where(loan_data['loan_status'].isin(['Default', 'Does not meet the credit policy. Status:Charged Off ',
                                                            'Late (31-120 days)','Charged Off']), 0, 1)

